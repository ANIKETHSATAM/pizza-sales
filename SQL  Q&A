1. Retrieve the total number of orders placed.

select count(order_id) as total_orders from orders ; 


 2. Calculate the total revenue generated from pizza sales.
 
 SELECT 
    ROUND(SUM(od.quantity * p.price), 0) AS revenue
FROM
    order_details AS od
        JOIN
    pizzas AS p ON od.pizza_id = p.pizza_id

3. Identify the highest-priced pizza.
     
SELECT 
    pizzas.price, pizza_types.name
FROM
    pizzas
        JOIN
    pizza_types ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;

4. Identify the most common pizza size ordered

SELECT 
    pizzas.size, COUNT(order_details.order_details_id) AS total
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizzas.size
ORDER BY total DESC
LIMIT 1;


5.List the top 5 most ordered pizza types along with their quantities 

SELECT 
    pizzas.pizza_type_id, sum(order_details.quantity) AS total
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizzas.size
ORDER BY total DESC
LIMIT 5;


6. Join the necessary tables to find the total quantity of each pizza category ordered.

select  category,count(name) from pizza_types
group by category  



7. Determine the distribution of orders by hour of the day.

SELECT 
    HOUR(order_time) as hours_of_the_day , COUNT(order_id) as total_ordered_count
FROM
    orders
GROUP BY HOUR(order_time)
order by total_ordered_count desc 
limit 10 ;

8.Group the orders by date and calculate the average number of pizzas ordered per day. (A clear daily trend can highlight operational or sales planning opportunities.)

SELECT 
    orders.order_date,
    SUM(quantity) / COUNT(quantity) AS avg_per_day
FROM
    orders
        JOIN
    order_details ON orders.order_id = order_details.order_id
GROUP BY orders.order_date
ORDER BY avg_per_day DESC
LIMIT 5;

9. Calculate the percentage contribution of each pizza type to total revenue.
 
SELECT 
  pizza_types.name ,sum(order_details.quantity * pizzas.price)/100.0		
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
        JOIN
    pizza_types ON pizzas.pizza_type_id = pizza_types.pizza_type_id
    group by pizza_types;

10. Analyze the cumulative revenue generated over time.

select order_date ,
 sum(revenue) over(order by order_date  ) as cum_revenue
 from 
(select orders.order_date , sum(order_details.quantity * pizzas.price) as revenue 
from order_details
 join pizzas 
on order_details.pizza_id = pizzas.pizza_id
join orders 
on orders.order_id = order_details.order_id
group by orders.order_date)
 as sales;  

11. Calculate the percentage contribution of each pizza type to total revenue.


SELECT 
    pizza_types.category  AS pizza_type,
    ROUND((SUM(order_details.quantity * pizzas.price) * 100.0) / 
          (SELECT SUM(order_details.quantity * pizzas.price) 
           FROM pizzas 
           JOIN order_details ON pizzas.pizza_id = order_details.pizza_id), 2) 
          AS percentage_contribution
FROM 
    pizzas
JOIN 
    order_details ON pizzas.pizza_id = order_details.pizza_id
JOIN 
    pizza_types ON pizzas.pizza_type_id = pizza_types.pizza_type_id
GROUP BY pizza_types.category;



12. Determine the top 3 most ordered pizza types based on revenue for each pizza category.

select name , revenue from 
(SELECT category, name, revenue,
    RANK() OVER (PARTITION BY category ORDER BY revenue DESC) AS rn
FROM (
    SELECT pizza_types.category, pizza_types.name, 
        SUM(order_details.quantity * pizzas.price) AS revenue
    FROM pizza_types
    JOIN pizzas 
        ON pizza_types.pizza_type_id = pizzas.pizza_type_id
    JOIN order_details 
        ON order_details.pizza_id = pizzas.pizza_id
    GROUP BY pizza_types.category, pizza_types.name
) AS a) as b where rn  <=3 ;
























